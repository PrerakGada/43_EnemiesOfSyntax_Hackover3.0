# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vi5nmdC1GKmX0Lhws4m_gkLWXSM8Bp-b
"""

import numpy as np 
import pandas as pd
from sklearn import metrics
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
from tensorflow import keras
from sklearn.metrics import confusion_matrix, classification_report

df = pd.read_csv("Social_Network_Ads.csv")

print("The shape of data = ")
print(df.shape)

print("The top 5 rows of data = ")
print(df.head())

print("Inforamtion about the data = ")
print(df.info())

X = df.iloc[:, [2,3]].values
Y = df.iloc[:, 4].values

from sklearn.model_selection import train_test_split
X_Train, X_Test, Y_Train, Y_Test = train_test_split(X, Y, test_size = 0.25, random_state = 0)

print("Shape of x_train",X_Train.shape)
print("Shape of Y_train",Y_Train.shape)
print("Shape of X_test",X_Test.shape)
print("Shape of Y_test",Y_Test.shape)

from sklearn.preprocessing import StandardScaler
sc_X = StandardScaler()
X_Train = sc_X.fit_transform(X_Train)
X_Test = sc_X.transform(X_Test)

from sklearn.tree import DecisionTreeClassifier
classifier = DecisionTreeClassifier(criterion = 'entropy')

classifier.fit(X_Train,Y_Train)

y_pred = classifier.predict(X_Test)

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(Y_Test, y_pred)
print("The confusion matrix for decison tree =")
print(cm)

from sklearn.metrics import accuracy_score

print('Model accuracy score with Decison tree criterion entropy: {0:0.4f}'. format(accuracy_score(Y_Test, y_pred)))

from sklearn import tree
tree.plot_tree(classifier.fit(X_Train,Y_Train))

"""# Naive bais"""

from sklearn.naive_bayes import GaussianNB
clfnb = GaussianNB()
clfnb.fit(X_Train, Y_Train)

y_pred = clfnb.predict(X_Test)

cm = confusion_matrix(Y_Test, y_pred)
print("The confusion matrix for naive bias ")
print(cm)
from sklearn.metrics import accuracy_score

print('Model accuracy score with Naive bais: {0:0.4f}'. format(accuracy_score(Y_Test, y_pred)))

